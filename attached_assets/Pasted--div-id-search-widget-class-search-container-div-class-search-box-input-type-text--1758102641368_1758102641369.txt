<div id="search-widget" class="search-container">
  <div class="search-box">
    <input type="text" id="search-input" placeholder="Поиск по сайту..." class="search-input">
    <button id="search-button" class="search-button">
      <svg class="search-icon" viewBox="0 0 24 24">
        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
    </button>
  </div>
  <div id="search-loading" class="search-loading hidden">
    <div class="loading-spinner"></div>
    <span>Поиск...</span>
  </div>
  <div id="search-results" class="search-results"></div>
  <div id="search-stats" class="search-stats hidden"></div>
  <div id="search-error" class="search-error hidden"></div>
</div>

<style>
/* Встроенный стиль */
.search-container {
  max-width: 600px;
  margin: 0 auto;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.search-box {
  position: relative;
  display: flex;
  align-items: center;
  background: #ffffff;
  border: 2px solid #e5e7eb;
  border-radius: 12px;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0,0,0,0.04);
}

.search-box:focus-within {
  border-color: #3b82f6;
  box-shadow: 0 4px 12px rgba(59,130,246,0.15);
}

.search-input {
  flex: 1;
  padding: 16px 20px;
  border: none;
  outline: none;
  font-size: 16px;
  background: transparent;
  color: #1f2937;
}

.search-input::placeholder {
  color: #9ca3af;
}

.search-button {
  padding: 12px;
  margin: 4px;
  background: #3b82f6;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-button:hover {
  background: #2563eb;
}

.search-icon {
  width: 20px;
  height: 20px;
  stroke: white;
  stroke-width: 2;
  fill: none;
}

.search-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 20px;
  color: #6b7280;
}

.loading-spinner {
  width: 20px;
  height: 20px;
  border: 2px solid #e5e7eb;
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.search-results {
  margin-top: 24px;
}

.result-item {
  background: #ffffff;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 16px;
  transition: all 0.2s ease;
  cursor: pointer;
}

.result-item:hover {
  border-color: #3b82f6;
  box-shadow: 0 4px 12px rgba(59,130,246,0.1);
}

.result-title {
  font-size: 18px;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 8px;
  text-decoration: none;
}

.result-title:hover {
  color: #3b82f6;
}

.result-url {
  font-size: 14px;
  color: #059669;
  margin-bottom: 8px;
  word-break: break-all;
}

.result-description {
  color: #4b5563;
  line-height: 1.5;
}

.search-stats {
  text-align: center;
  padding: 16px;
  color: #6b7280;
  font-size: 14px;
  background: #f9fafb;
  border-radius: 8px;
  margin-top: 16px;
}

.search-error {
  background: #fef2f2;
  border: 1px solid #fecaca;
  color: #dc2626;
  padding: 16px;
  border-radius: 8px;
  margin-top: 16px;
}

.hidden {
  display: none !important;
}

.no-results {
  text-align: center;
  padding: 40px 20px;
  color: #6b7280;
}

@media (max-width: 768px) {
  .search-container { margin: 0 16px; }
  .search-input { font-size: 16px; }
  .result-item { padding: 16px; }
}
</style>

<script>
class TildaSearchWidget {
  constructor(apiEndpoint) {
    this.apiEndpoint = apiEndpoint;
    this.debounceTimeout = null;
    this.currentQuery = '';
    this.controller = null;
    this.init();
  }

  init() {
    this.searchInput = document.getElementById('search-input');
    this.searchButton = document.getElementById('search-button');
    this.loadingEl = document.getElementById('search-loading');
    this.resultsEl = document.getElementById('search-results');
    this.statsEl = document.getElementById('search-stats');
    this.errorEl = document.getElementById('search-error');

    this.searchInput.addEventListener('input', (e) => this.handleInput(e));
    this.searchInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        this.performSearch(e.target.value.trim());
      }
    });
    this.searchButton.addEventListener('click', () => {
      this.performSearch(this.searchInput.value.trim());
    });
  }

  handleInput(e) {
    const query = e.target.value.trim();
    clearTimeout(this.debounceTimeout);
    if (query.length === 0) {
      this.clearResults();
      return;
    }

    this.debounceTimeout = setTimeout(() => {
      if (query.length >= 2) {
        this.performSearch(query);
      }
    }, 300);
  }

  async performSearch(query) {
    if (!query || query.length < 2) {
      this.showError('Введите минимум 2 символа для поиска');
      return;
    }

    this.currentQuery = query;
    this.showLoading();
    this.hideError();

    // отмена предыдущего запроса
    if (this.controller) this.controller.abort();
    this.controller = new AbortController();

    try {
      const response = await fetch(
        `${this.apiEndpoint}/search?q=${encodeURIComponent(query)}&limit=10`,
        { signal: this.controller.signal }
      );

      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const data = await response.json();
      this.displayResults(data, query);
    } catch (error) {
      if (error.name !== 'AbortError') {
        this.showError('Ошибка поиска. Попробуйте позже.');
        console.error(error);
      }
    } finally {
      this.hideLoading();
    }
  }

  displayResults(data, query) {
    const { results, total } = data;
    if (!results || results.length === 0) {
      this.resultsEl.innerHTML = `
        <div class="no-results">
          <p>По запросу <strong>"${this.escapeHtml(query)}"</strong> ничего не найдено</p>
        </div>
      `;
      this.hideStats();
      return;
    }

    this.resultsEl.innerHTML = results.map(r => this.renderResult(r, query)).join('');
    this.showStats(total, query);
  }

  renderResult(r, query) {
    const title = r.title || 'Без названия';
    const desc = this.truncateText(r.metaDescription || r.content || '', 200);
    return `
      <div class="result-item" onclick="window.open('${r.url}', '_blank')">
        <a href="${r.url}" target="_blank" class="result-title" onclick="event.stopPropagation()">
          ${this.highlight(this.escapeHtml(title), query)}
        </a>
        <div class="result-url">${this.escapeHtml(r.url)}</div>
        <div class="result-description">${this.highlight(this.escapeHtml(desc), query)}</div>
      </div>
    `;
  }

  highlight(text, query) {
    const words = query.split(/\s+/).filter(w => w.length > 1);
    let highlighted = text;
    words.forEach(w => {
      const re = new RegExp(`(${this.escapeRegex(w)})`, 'gi');
      highlighted = highlighted.replace(re, '<mark>$1</mark>');
    });
    return highlighted;
  }

  truncateText(text, max) {
    return text.length <= max ? text : text.slice(0, max).replace(/\s+\S*$/, '') + '...';
  }

  escapeHtml(text) {
    const d = document.createElement('div'); d.textContent = text;
    return d.innerHTML;
  }

  escapeRegex(text) {
    return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  showLoading() {
    this.loadingEl.classList.remove('hidden');
    this.resultsEl.innerHTML = '';
    this.hideStats();
  }

  hideLoading() {
    this.loadingEl.classList.add('hidden');
  }

  showStats(total, query) {
    this.statsEl.innerHTML = `Найдено <strong>${total}</strong> по запросу <strong>"${this.escapeHtml(query)}"</strong>`;
    this.statsEl.classList.remove('hidden');
  }

  hideStats() {
    this.statsEl.classList.add('hidden');
  }

  showError(msg) {
    this.errorEl.innerHTML = msg;
    this.errorEl.classList.remove('hidden');
    this.resultsEl.innerHTML = '';
  }

  hideError() {
    this.errorEl.classList.add('hidden');
  }

  clearResults() {
    this.resultsEl.innerHTML = '';
    this.hideStats();
    this.hideError();
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const searchWidget = new TildaSearchWidget('https://tilda-search-bot-forlandeivan.replit.app/api');
  window.searchWidget = searchWidget;
});
</script>
